name: Continuous builds

on: [push, pull_request]

jobs:
  bionic-x86_64:
    name: Native packages for Ubuntu bionic, Debian testing and newer, x86_64
    env:
      DIST: bionic
      ARCH: x86_64
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build in Docker
        run: bash -ex ci/build-in-docker.sh "$DIST"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bionic x86_64
          path: appimagelauncher*.deb*

  bionic-i386:
    name: Native packages for Ubuntu bionic, Debian testing and newer, i386
    env:
      DIST: bionic
      ARCH: i386
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build in Docker
        run: bash -ex ci/build-in-docker.sh "$DIST"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bionic i386
          path: appimagelauncher*.deb*

  xenial-x86_64:
    name: Native packages for Ubuntu xenial, Debian stable etc., x86_64
    env:
      DIST: xenial
      ARCH: x86_64
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build in Docker
        run: bash -ex ci/build-in-docker.sh "$DIST"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xenial x86_64
          path: |
            appimagelauncher*.deb*
            appimagelauncher*.rpm*
            appimagelauncher*.tar*

  xenial-i386:
    name: Native packages for Ubuntu xenial, Debian stable etc., i386
    env:
      DIST: xenial
      ARCH: i386
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build in Docker
        run: bash -ex ci/build-in-docker.sh "$DIST"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xenial i386
          path: |
            appimagelauncher*.deb*
            appimagelauncher*.rpm*
            appimagelauncher*.tar*

  bionic-arm64:
    name: Native packages for Ubuntu bionic, Debian testing and newer, arm64
    env:
      DIST: bionic
      ARCH: arm64
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set up QEMU integration for Docker
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Build in Docker
        run: bash -ex ci/build-in-docker.sh "$DIST"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bionic arm64
          path: appimagelauncher*.deb*

  bionic-armhf:
    name: Native packages for Ubuntu bionic, Debian testing and newer, armhf
    env:
      DIST: bionic
      ARCH: armhf
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set up QEMU integration for Docker
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Build in Docker
        run: bash -ex ci/build-in-docker.sh "$DIST"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bionic armhf
          path: appimagelauncher*.deb*

  xenial-armhf:
    name: Native packages for Ubuntu xenial, Debian stable etc., armhf
    env:
      DIST: xenial
      ARCH: armhf
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Set up QEMU integration for Docker
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Build in Docker
        run: bash -ex ci/build-in-docker.sh "$DIST"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: xenial armhf
          path: appimagelauncher*.deb*

  lite-x86_64:
    name: AppImageLauncher Lite AppImage x86_64
    env:
      DIST: bionic
      ARCH: x86_64
      BUILD_LITE: 1
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build in Docker
        run: bash -ex ci/build-in-docker.sh "$DIST"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bionic x86_64
          path: appimagelauncher-lite-*.AppImage*

  lite-i386:
    name: AppImageLauncher Lite AppImage i386
    env:
      DIST: bionic
      ARCH: i386
      BUILD_LITE: 1
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build in Docker
        run: bash -ex ci/build-in-docker.sh "$DIST"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bionic i386
          path: appimagelauncher-lite-*.AppImage*

  upload:
    name: Create release and upload artifacts
    needs:
      - bionic-x86_64
      - bionic-i386
      - xenial-x86_64
      - xenial-i386
      - bionic-arm64
      - bionic-armhf
      - xenial-armhf
      - lite-x86_64
      - lite-i386
    runs-on: ubuntu-18.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Inspect directory after downloading artifacts
        run: ls -alFR
      - name: Create release and upload artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
          WEBDAV_USER: ${{ secrets.WEBDAV_USER }}
          WEBDAV_PASSWORD: ${{ secrets.WEBDAV_PASSWORD }}
        run: |
            wget -q https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
            chmod +x pyuploadtool-x86_64.AppImage
            ./pyuploadtool-x86_64.AppImage **/appimagelauncher*.{deb,rpm,tar*,AppImage*}
